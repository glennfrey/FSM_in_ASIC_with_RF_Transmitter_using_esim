\TLV_version 1d: tl-x.org
\SV
/* verilator lint_off UNUSED*/  /* verilator lint_off DECLFILENAME*/  /* verilator lint_off BLKSEQ*/  /* verilator lint_off WIDTH*/  /* verilator lint_off SELRANGE*/  /* verilator lint_off PINCONNECTEMPTY*/  /* verilator lint_off DEFPARAM*/  /* verilator lint_off IMPLICIT*/  /* verilator lint_off COMBDLY*/  /* verilator lint_off SYNCASYNCNET*/  /* verilator lint_off UNOPTFLAT */  /* verilator lint_off UNSIGNED*/  /* verilator lint_off CASEINCOMPLETE*/  /* verilator lint_off UNDRIVEN*/  /* verilator lint_off VARHIDDEN*/  /* verilator lint_off CASEX*/  /* verilator lint_off CASEOVERLAP*/  /* verilator lint_off PINMISSING*/  /* verilator lint_off LATCH*/  /* verilator lint_off BLKANDNBLK*/  /* verilator lint_off MULTIDRIVEN*/  /* verilator lint_off NULLPORT*/  /* verilator lint_off EOFNEWLINE*/  /* verilator lint_off WIDTHCONCAT*/  /* verilator lint_off ASSIGNDLY*/  /* verilator lint_off MODDUP*/  /* verilator lint_off STMTDLY*/  /* verilator lint_off LITENDIAN*/  /* verilator lint_off INITIALDLY*/  /* verilator lint_off */  

//Your Verilog/System Verilog Code Starts Here:
module glenn_ASIC(
	input [7:0]in_Sensor1, //light
	input [7:0]in_Sensor2, //moist
	input [7:0]in_Sensor3, //rain
	input [7:0]in_Sensor4, //temp
	input [7:0]in_Sensor5, //humidity
	input in_Global_Clock,
	input in_Clk,
	input in_RST,
	output [7:0]out_Light,
	output reg  out_Tx_Serial
);
	reg [7:0]reg_light = in_Sensor1;
	reg [7:0]reg_moist = in_Sensor2;
	reg [7:0]reg_rain  = in_Sensor3;
	reg [7:0]reg_temp = in_Sensor4;
	reg [7:0]reg_humidity  = in_Sensor5;
	reg [3:0] In3=3'b000;
	reg d0,d1,d2,d3,d4,d5,d6,d7;
	reg [3:0]reg_Out1 = 0;
    reg en = 1'b1;
	reg reg_1minRecord = 0;
	reg reg_5minTransmit = 0;
	reg [7:0]reg_address = 0;
	reg [31:0]reg_d = 0;
	reg [31:0]reg_q = 0;
	reg reg_Tx_Active;
	reg reg_Tx_Done;
	reg [7:0]reg_Tx_8bitData;
	reg [7:0]reg_trackaddress = 0;
	
	
	assign In3[0]=(reg_light<20)?1:0; //if night set In3 bit0 to 1
	assign In3[1]=(reg_moist<10)?1:0; //if dry set In3 bit1 to 1
	assign In3[2]=(reg_rain<50)?1:0;  //if raining set In3 bit2 to 1
	
	always@(posedge in_Clk)
	begin
	if (reg_1minRecord==1)
	begin
	reg_address = reg_address + 1;
	reg_d[31:24] = in_Sensor2;
	reg_d[23:16] = in_Sensor3;
	reg_d[15:8] = in_Sensor4;
	reg_d[7:0] = in_Sensor5;
	end
	else
	reg_1minRecord = 0;
	end
	always@(posedge in_Clk)
	begin
	if (reg_5minTransmit==1)
		begin
		reg_trackaddress = reg_address;
		reg_address = 0;
		end
		if (reg_address<reg_trackaddress)
		reg_Tx_8bitData=[7:0]reg_q;
			if(reg_Tx_Done==1)
			reg_Tx_8bitData =[15:8]reg_q
				if(reg_Tx_Done==1)
				reg_Tx_8bitData =[23:16]reg_q
					if(reg_Tx_Done==1)
					reg_Tx_8bitData =[31:24]reg_q
						if(reg_Tx_Done==1)
						reg_address = reg_address + 1;
		else
		begin
		reg_trackaddress = 0;
		reg_address = 0;
		reg_5minTransmitb = 0;
		end
	end 
	
	
	
glenn_FSM glenn_FSM(.In3(In3), .RST(in_RST), .clk(in_Global_Clock), .Out1(reg_Out1));
glenn_3bitDecoder glenn_3bitDecoder(.in3(reg_Out1), .en(en), .d0(d0), .d1(d1), .d2(d2), .d3(d3), .d4(d4), .d5(d5), .d6(d6), .d7(d7));
glenn_RAM128x32 glenn_RAM128x32(.clk(in_Global_Clock), .we(reg_1minRecord), .address(reg_address), .d(reg_d), .q(reg_q));
glenn_TIMER glenn_TIMER(.in_Clk(in_Clk), .out_1minRecord(reg_1minRecord), .out_5minTransmit(reg_5minTransmit));
glenn_UART glenn_UART(.in_UART_Clock(in_Global_Clock), .in_Tx_En(reg_5minTransmit), .in_Tx_8bitData(reg_Tx_8bitData), .out_Tx_Active(reg_Tx_Active), .out_Tx_Serial(out_Tx_Serial), .out_Tx_Done(reg_Tx_Done));
endmodule

//Top Module Code Starts here:
	module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);
		logic  [7:0] in_Sensor1;//input
		logic  [7:0] in_Sensor2;//input
		logic  [7:0] in_Sensor3;//input
		logic  [7:0] in_Sensor4;//input
		logic  [7:0] in_Sensor5;//input
		logic  in_Global_Clock;//input
		logic  in_Clk;//input
		logic  in_RST;//input
		logic  [7:0] out_Light;//output
		logic  out_Tx_Serial;//output
//The $random() can be replaced if user wants to assign values
		assign in_Sensor1 = $random();
		assign in_Sensor2 = $random();
		assign in_Sensor3 = $random();
		assign in_Sensor4 = $random();
		assign in_Sensor5 = $random();
		assign in_Global_Clock = $random();
		assign in_Clk = $random();
		assign in_RST = $random();
		glenn_ASIC glenn_ASIC(.in_Sensor1(in_Sensor1), .in_Sensor2(in_Sensor2), .in_Sensor3(in_Sensor3), .in_Sensor4(in_Sensor4), .in_Sensor5(in_Sensor5), .in_Global_Clock(in_Global_Clock), .in_Clk(in_Clk), .in_RST(in_RST), .out_Light(out_Light), .out_Tx_Serial(out_Tx_Serial));
	
\TLV
//Add \TLV here if desired                                     
\SV
endmodule

